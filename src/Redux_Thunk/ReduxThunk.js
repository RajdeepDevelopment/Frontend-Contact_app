import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import getTableData from "../Api/table/get";

const initialState = {
  value: 0,
  status: "idle",
  tableData: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getTableDataAsync = createAsyncThunk(
  "counter/getTableData",
  async (argument) => {
    const [skip, limit, signal] = argument;

    const response = await getTableData(skip, limit, signal);
    return response;
  }
);
export const getTableDataUpdateAsync = createAsyncThunk(
  "counter/getTableDataUpdate",
  async (argument) => {
    console.log(argument, "argument");
    return { data: argument };
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTableDataAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getTableDataAsync.fulfilled, (state, action) => {
        state.status = "idle";
        if (action.payload?.status === 200) {
          state.tableData = action.payload.data;
        }
      })
      .addCase(getTableDataUpdateAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getTableDataUpdateAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.tableData = action.payload.data;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTableData = (state) => state.counter.tableData;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default counterSlice.reducer;
